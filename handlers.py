import asyncio
import datetime
import apiai
import json
from aiogram.utils.emoji import emojize
import logging

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandStart
from aiogram.types import (Message, InlineKeyboardMarkup, InlineKeyboardButton,
                           CallbackQuery, LabeledPrice,ReplyKeyboardMarkup, PreCheckoutQuery)
from aiogram.utils.callback_data import CallbackData

import database
import states
from config import lp_token, admin_id
from load_all import dp, bot, _
import asyncio

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.redis import RedisStorage2
from aiogram.dispatcher import DEFAULT_RATE_LIMIT
from aiogram.dispatcher.handler import CancelHandler, current_handler
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.utils.exceptions import Throttled

db = database.DBCommands()
logging.basicConfig(level=logging.INFO)

# –ò—Å–ø–æ–ª—å–∑—É–µ–º CallbackData –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–±–µ–∫–∞–º–∏, –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–∫—É–ø–∫–æ–π —Ç–æ–≤–∞—Ä–æ–≤
buy_item = CallbackData("buy", "item_id")

def rate_limit(limit: int, key=None):
    """
    Decorator for configuring rate limit and key in different functions.

    :param limit:
    :param key:
    :return:
    """

    def decorator(func):
        setattr(func, 'throttling_rate_limit', limit)
        if key:
            setattr(func, 'throttling_key', key)
        return func

    return decorator


class ThrottlingMiddleware(BaseMiddleware):
    """
    Simple middleware
    """

    def __init__(self, limit=DEFAULT_RATE_LIMIT, key_prefix='antiflood_'):
        self.rate_limit = limit
        self.prefix = key_prefix
        super(ThrottlingMiddleware, self).__init__()

    async def on_process_message(self, message: types.Message, data: dict):
        """
        This handler is called when dispatcher receives a message

        :param message:
        """
        # Get current handler
        handler = current_handler.get()

        # Get dispatcher from context
        dispatcher = Dispatcher.get_current()
        # If handler was configured, get rate limit and key from handler
        if handler:
            limit = getattr(handler, 'throttling_rate_limit', self.rate_limit)
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            limit = self.rate_limit
            key = f"{self.prefix}_message"

        # Use Dispatcher.throttle method.
        try:
            await dispatcher.throttle(key, rate=limit)
        except Throttled as t:
            # Execute action
            await self.message_throttled(message, t)

            # Cancel current handler
            raise CancelHandler()

    async def message_throttled(self, message: types.Message, throttled: Throttled):
        """
        Notify user only on first exceed and notify about unlocking only on last exceed

        :param message:
        :param throttled:
        """
        handler = current_handler.get()
        dispatcher = Dispatcher.get_current()
        if handler:
            key = getattr(handler, 'throttling_key', f"{self.prefix}_{handler.__name__}")
        else:
            key = f"{self.prefix}_message"

        # Calculate how many time is left till the block ends
        delta = throttled.rate - throttled.delta

        # Prevent flooding
        if throttled.exceeded_count <= 2:
            await message.reply('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!\n'
                                '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.')

        # Sleep.
        await asyncio.sleep(delta)

        # Check lock status
        thr = await dispatcher.check_key(key)

        # If current message is not last with current key - do not send message
        if thr.exceeded_count == throttled.exceeded_count:
            await message.reply('Unlocked.')

# –î–ª—è –∫–æ–º–∞–Ω–¥—ã /start –µ—Å—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
@dp.message_handler(commands=['start'])
@rate_limit(5, 'start')
async def register_user(message: types.Message):
    welcome_text = _("üñêüèª–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    chat_id = message.from_user.id
    referral = message.get_args()
    user = await db.add_new_user(referral=referral)
    id = user.id
    count_users = await db.count_users()
    count_items = await db.count_items()
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤
    languages_markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="üá∑üá∫" + "  –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
            [
                InlineKeyboardButton(text="üá¨üáß" + "  English", callback_data="lang_en"),
                InlineKeyboardButton(text="üá∫üá¶" + "  –£–∫—Ä–∞—ó–Ω—å—Å–∫–∞", callback_data="lang_uk"),

            ]
        ]
    )

##
    keyboard_markup = types.ReplyKeyboardMarkup(row_width=3,resize_keyboard=True)
    # default row_width is 3, so here we can omit it actually
    # kept for clearness
    btns_text = ('üëÄ–ö–æ–º–Ω–∞—Ç—ã','‚ò∫–ü–æ–º–æ—â—å', 'üòá–†–µ—Ñ–µ—Ä–∞–ª—ã','')
    keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))
    await bot.send_message(chat_id, welcome_text, reply_markup=keyboard_markup)
    await asyncio.sleep(0.3)



    bot_username = (await bot.me).username
    bot_link = f"https://t.me/{bot_username}?start={id}"

    # –î–ª—è –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç–∏, –≤—Å–µ —Ç–µ–∫—Å—Ç—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ —Ñ—É–Ω–∫—Ü–∏—é "_"
    # –í–º–µ—Å—Ç–æ "—Ç–µ–∫—Å—Ç" –ø–µ—Ä–µ–¥–∞–µ–º _("—Ç–µ–∫—Å—Ç")

    text = _("\n"
             "\n"
             "üò∫–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—à–∏–º–∏ —É—Å–ª—É–≥–∞–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è <b>{count_users} —á–µ–ª–æ–≤–µ–∫!</b>\n"
             "üòá–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n {bot_link}\n"
             "üëÄ–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∫–æ–º–Ω–∞—Ç –º–æ–∂–Ω–æ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏!\n").format(
        count_users=count_users + 12,
        count_items=count_items + 15,
        bot_link=bot_link,
    )

    # if message.from_user.id == admin_id:
    #     text += _("____________________________\n"
    #               "<b>–ü–ê–ù–ï–õ–¨ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:</b>\n"
    #               "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: /add_item\n"
    #               "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã : /show_orders\n"
    #               "–°–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É: /tell_everyone \n"
    #               "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: /add_admin")
    await bot.send_photo(chat_id, caption=text,
                         photo="AgACAgIAAxkBAAILe17mEby95kQBtKiPDnrDwJ1Ud6_CAAKDrjEblDExS8zpTPqVna7fKEF9kS4AAwEAAwIAA3gAA1N0BAABGgQ",
                         reply_markup=languages_markup)
    admin_markup = InlineKeyboardMarkup
    if message.from_user.id == admin_id:
        admin_text = "<b>–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.</b>\n"
        admin_markup = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
        # default row_width is 3, so here we can omit it actually
        # kept for clearness
        btns_text = ('üëÄ–ö–æ–º–Ω–∞—Ç—ã', '‚ò∫–ü–æ–º–æ—â—å', 'üòá–†–µ—Ñ–µ—Ä–∞–ª—ã', 'üòé–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ')
        admin_markup.row(*(types.KeyboardButton(text) for text in btns_text))
        await bot.send_message(chat_id = admin_id, text = admin_text,reply_markup = admin_markup)


@dp.message_handler(text_contains = "üòé")#–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ
async def admin_inline(message : Message):
    text =_("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∏–∂–µ: \n")
    admin_markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_items")],

            [
                InlineKeyboardButton(text="–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="show_orders"),
                InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞", callback_data="tell_everyone"),

            ],
            [
                InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_item")

            ]

        ]
    )
    await bot.send_message(chat_id = message.from_user.id, text = text, reply_markup = admin_markup)


@dp.message_handler(text_contains = '‚ò∫') #–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
@rate_limit(5, '‚ò∫')
async def admin_contact(message:Message):
    await bot.send_contact(chat_id=message.from_user.id, phone_number = '+79246811768',first_name = 'Pavel', last_name='Prutkov')



# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä text_contains, –æ–Ω —É–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–æ, —á—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ call.data
@dp.callback_query_handler(text_contains="lang")
async def change_language(call: CallbackQuery):
    await call.message.edit_reply_markup()
    # –î–æ—Å—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä ru)
    lang = call.data[-2:]
    await db.set_language(lang)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –º—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫, –≤ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –≤—Å–µ –µ—â–µ —É–∫–∞–∑–∞–Ω —Å—Ç–∞—Ä—ã–π, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º locale=lang
    await call.message.answer(_("–í–∞—à —è–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω", locale=lang))


@dp.message_handler(text_contains = 'üòá') # –†–µ—Ñ–µ—Ä–∞–ª—ã
async def check_referrals(message: types.Message):
    referrals = await db.check_referrals()
    text = _("–í–∞—à–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:\n{referrals}").format(referrals=referrals)
    await message.answer(text)


# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(text_contains = 'üëÄ') #–∫–æ–º–Ω–∞—Ç—ã
async def show_items(message: Message):
    await bot.send_message(chat_id = message.from_user.id,text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –Ω–∞—Å —Å–≤–æ–±–æ–¥–Ω—ã —ç—Ç–∏ –∫–æ–º–Ω–∞—Ç—ã: \n"
                           )
    await asyncio.sleep(0.5)
    # –î–æ—Å—Ç–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    all_items = await db.show_items()
    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º
    for num, item in enumerate(all_items):
        if not item.occupied:
            text = _('\t <u>{name}</u>\n'
                     '<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> \t {description}\n'
                     '<b>–¶–µ–Ω–∞:</b> \t{price:,}0 RUB –∑–∞ —Å—É—Ç–∫–∏\n')
            markup = InlineKeyboardMarkup(
                inline_keyboard=
                [
                    [
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–∫—É–ø–∏—Ç—å" –∏ –ø–µ—Ä–µ–¥–∞–µ–º –µ–µ –∞–π–¥–∏—à–Ω–∏–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–±–µ–∫–∞
                        InlineKeyboardButton(text=_("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å"), callback_data=buy_item.new(item_id=item.id))
                    ],
                ]
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –ø–æ–¥–ø–∏—Å—å—é –∏ –∫–Ω–æ–ø–∫–æ–π "–∫—É–ø–∏—Ç—å"
            await message.answer_photo(
                photo=item.photo,
                caption=text.format(
                    id=item.id,
                    name=item.name,
                    description = item.description,
                    price=item.price / 100
                ),
                reply_markup=markup
            )
            # –ú–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã
            await asyncio.sleep(0.5)
    await bot.send_message(chat_id = message.from_user.id,
                           text = "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É\n"
                                   "–Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏—à—É –≤ –º–µ–Ω—é –Ω–∏–∂–µüëáüëáüëáüëáüëá")

# –î–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∫–æ–ª–ª–±–µ–∫–∞–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å buy_item.filter()
@dp.callback_query_handler(buy_item.filter())
async def buying_item(call: CallbackQuery, callback_data: dict, state: FSMContext):
    # –¢–æ, —á—Ç–æ –º—ã —É–∫–∞–∑–∞–ª–∏ –≤ CallbackData –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ–¥ callback_data, –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å, –ø–æ—ç—Ç–æ–º—É –¥–æ—Å—Ç–∞–µ–º –∞–π–¥–∏—à–Ω–∏–∫
    item_id = int(callback_data.get("item_id"))
    await call.message.edit_reply_markup()

    # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    item = await database.Item.get(item_id)
    if not item:
        await call.message.answer(_("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"))
        return

    text = _("–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å \"<b>{name}</b>\" \n"
             "–†–∞–∑–º–µ—Ä <b>–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ–ø–ª–∞—Ç—ã —Å–æ—Å—Ç–æ–≤–ª—è–µ—Ç</b>: <i>{price:,}/—Å—É—Ç–∫–∏.</i>\n"
             "<u>–í–≤–µ–¥–∏—Ç–µ</u> –Ω–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è —É –Ω–∞—Å.").format(name=item.name,
                                                             price=item.price / 100)
    await call.message.answer(text)
    await states.Purchase.EnterQuantity.set()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –§–°–ú –∫–ª–∞—Å—Å —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–∫—É–ø–∫–∏
    await state.update_data(
        item=item,
        purchase=database.Purchase(
            item_id=item_id,
            purchase_time=datetime.datetime.now(),
            buyer=call.from_user.id,
            item_name = item.name
        )
    )


# –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤ —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
@dp.message_handler(regexp=r"^(\d+)$", state=states.Purchase.EnterQuantity)
async def enter_quantity(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    quantity = int(message.text)
    async with state.proxy() as data:  # –†–∞–±–æ—Ç–∞–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –§–°–ú
        data["purchase"].quantity = quantity
        item = data["item"]
        amount = item.price * quantity
        data["purchase"].amount = amount

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    agree_button = InlineKeyboardButton(
        text=_("üëå–í—Å–µ –≤–µ—Ä–Ω–æ!üëå"),
        callback_data="agree"
    )
    change_button = InlineKeyboardButton(
        text=_("ü§¶‚Äç‚ôÄ–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–æ–≤–æü§¶‚Äç‚ôÇ"),
        callback_data="change"
    )
    cancel_button = InlineKeyboardButton(
        text=_("üôÖ‚Äç‚ôÄ–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—ÉüôÖ‚Äç‚ôÇ"),
        callback_data="cancel"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = InlineKeyboardMarkup(
        inline_keyboard=
        [
            [agree_button],  # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [change_button],  # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            [cancel_button]  # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        ]
    )
    await message.answer(
        _("–û—Ç–ª–∏—á–Ω–æ!    \n"
          "–í—ã –∂–µ–ª–∞–µ—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å \"{name}\" \n"
          "–Ω–∞ <i>{quantity}</i> —Å—É—Ç–æ–∫ \n"
          "–ø–æ —Ü–µ–Ω–µ <b>{price:,} –∑–∞ —Å—É—Ç–∫–∏.</b>\n"
          "____________________________________\n"
          "–û–±—â–∞—é —Å—É–º–º–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: <u><b>{amount:,}0</b></u>.\n"
          "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?").format(
            quantity=quantity,
            name=item.name,
            amount=amount / 100,
            price=item.price / 100
        ),
        reply_markup=markup)
    await states.Purchase.Approval.set()


# –¢–æ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç
@dp.message_handler(state=states.Purchase.EnterQuantity)
async def not_quantity(message: Message):
    await message.answer(_("–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (* Ôø£Ô∏øÔø£)"))


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ
@dp.callback_query_handler(text_contains="cancel", state=states.Purchase)
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer(_("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —ç—Ç—É –ø–æ–∫—É–ø–∫—É (* Ôø£Ô∏øÔø£)"))
    await state.reset_state()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
@dp.callback_query_handler(text_contains="change", state=states.Purchase.Approval)
async def approval(call: CallbackQuery):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer(_("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.   "))
    await states.Purchase.EnterQuantity.set()




# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "—Å–æ–≥–ª–∞—Å–µ–Ω"
@dp.callback_query_handler(text_contains="agree", state=states.Purchase.Approval)
async def approval(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    item: database.Item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()
    await purchase.create()
    await bot.send_message(chat_id=call.from_user.id,
                           text=_("–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç—å!\n"
                                  "–ü—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –º–æ–∂–Ω–æ –ø–æ –∫–Ω–æ–ø–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –≤–æ—Ç-–≤–æ—Ç –ø–æ—è–≤–∏—Ç—Å—è!\n"
                                  ).format(amount=purchase.amount))
    await asyncio.sleep(0.5)

    currency = "RUB"
    need_name = True
    need_phone_number = True
    need_email = True
    need_shipping_address = False

    await bot.send_invoice(chat_id=call.from_user.id,
                           title=item.name,
                           description=item.name,
                           payload=str(purchase.id),
                           start_parameter=str(purchase.id),
                           currency=currency,
                           prices=[
                               LabeledPrice(label=item.name, amount=purchase.amount)
                           ],
                           provider_token=lp_token,
                           need_name=need_name,
                           need_phone_number=need_phone_number,
                           need_email=need_email,
                           need_shipping_address=need_shipping_address
                           )
    await state.update_data(purchase=purchase)
    await states.Purchase.Payment.set()


@dp.pre_checkout_query_handler(state=states.Purchase.Payment)
async def checkout(query: PreCheckoutQuery, state: FSMContext):
    await bot.answer_pre_checkout_query(query.id, True)
    data = await state.get_data()
    purchase: database.Purchase = data.get("purchase")
    success = await check_payment(purchase)

    if success:
        await purchase.update(
            successful=True,
            shipping_address=query.order_info.shipping_address.to_python()
            if query.order_info.shipping_address
            else None,
            phone_number=query.order_info.phone_number,
            receiver=query.order_info.name,
            email=query.order_info.email
        ).apply()
        await state.reset_state()
        await bot.send_message(query.from_user.id, _("–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å   \(@^0^@)/"))
        await bot.send_message(query.from_user.id, _("–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ö–æ—Å—Ç–µ–ª ‚Äî —ç—Ç–æ –æ–±—â–µ–∂–∏—Ç–∏–µ.\n"
                                                     "‚Ä¢–£–≤–∞–∂–∞–π—Ç–µ –ª–∏—á–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π.\n"
                                                     "‚Ä¢–°–æ–±–ª—é–¥–∞–π—Ç–µ —Ç–∏—à–∏–Ω—É.\n"
                                                     "‚Ä¢–ù–µ —Å–æ—Ä–∏—Ç–µ!\n"
                                                     "‚Ä¢–ü—Ä–∏—Å–º–∞—Ç—Ä–∏–≤–∞—Ç–µ –∑–∞ —Å–≤–æ–∏–º–∏ –≤–µ—â–∞–º–∏.\n"
                                                     "‚Ä¢–í–æ–∑—å–º–∏—Ç–µ —Å —Å–æ–±–æ–π –æ–¥–µ–∂–¥—É –¥–ª—è —Å–Ω–∞, –±–µ—Ä—É—à–∏ –∏ –ø–æ–≤—è–∑–∫—É –Ω–∞ –≥–ª–∞–∑–∞.\n"
                                                     "‚Ä¢–ò —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - <b>–æ–±—â–∞–π—Ç–µ—Å—å!</b>"))

    else:
        await bot.send_message(query.from_user.id, _("–û–ø–ª–∞—Ç–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..."))


#@dp.message_handler()
#async def other_echo(message: Message):
#    await message.answer(message.text)





@dp.message_handler(commands="set_commands", state="*")
async def cmd_set_commands(message: types.Message):
    if message.from_user.id == admin_id:  # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–≤–æ–π Telegram ID
        commands = [types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É")]
        await bot.set_my_commands(commands)
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.")


async def check_payment(purchase: database.Purchase):
    return True



# In this example Redis storage is used

